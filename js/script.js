// Generated by CoffeeScript 1.9.2
(function() {
  var Body, Brain, CanvasView, World, giz, log;

  log = function(logText) {
    return console.log(logText);
  };

  Brain = (function() {
    function Brain(worldHeight) {
      this.worldHeight = worldHeight;
    }

    Brain.prototype.init = function() {
      this.worldDef = new World(10, 50, {
        x: 0,
        y: -10
      }, false);
      this.world = this.worldDef.setWorld();
      this.canvas = new CanvasView();
      this.canvas.setCanvas();
      this.scale = this.getCanvasWorldRatio();
      this.worldWidth = this.calculateWorldWidth();
      this.bodiesArray = [];
      this.inputHandler();
      this.setButtons();
      return 0;
    };

    Brain.prototype.getCanvasWorldRatio = function() {
      var scale;
      return scale = this.canvas.height / this.worldHeight;
    };

    Brain.prototype.calculateWorldWidth = function() {
      return this.canvas.width / this.scale;
    };

    Brain.prototype.inputHandler = function() {
      $(window).keydown(this.keyDownEvent.bind(this));
      return 0;
    };

    Brain.prototype.keyDownEvent = function(event) {
      var body, dimensions, keyCode, shape;
      keyCode = event.which;
      if (keyCode === 83 || keyCode === 67) {
        if (keyCode === 67) {
          shape = "circle";
          dimensions = {
            radius: Math.random() * 5 + 0.1
          };
        }
        if (keyCode === 83) {
          shape = "square";
          dimensions = {
            side: Math.random() * 5 + 0.1
          };
        }
        body = new Body(this.world, shape, dimensions, this.worldWidth, this.worldHeight);
        body.putBodyInTheWorld();
        this.draw(body);
        this.bodiesArray.push(body);
        return 0;
      }
    };

    Brain.prototype.setButtons = function() {
      $('#play').click((function() {
        return this.animation = requestAnimationFrame((function() {
          return this.update(this);
        }).bind(this));
      }).bind(this));
      return $('#pause').click((function() {
        alert(this.animation);
        return cancelAnimationFrame(this.animation);
      }).bind(this));
    };

    Brain.prototype.draw = function(body) {
      var canvasPosition, radius, side, worldPosition;
      worldPosition = body.getWorldPosition();
      canvasPosition = this.convertWorldToCanvasFrame(this.scale, worldPosition);
      this.context = this.canvas.context;
      if (body.shape === 'square') {
        side = body.dimensions.side * this.scale;
        this.context.rect(canvasPosition.x, canvasPosition.y, side, side);
      }
      if (body.shape === 'circle') {
        radius = body.dimensions.radius * this.scale;
        this.context.beginPath();
        this.context.arc(canvasPosition.x, canvasPosition.y, radius, 0, 2 * Math.PI);
      }
      return this.context.stroke();
    };

    Brain.prototype.update = function(self) {
      self.world.Step(1 / 60, 8, 3);
      self.draw(self.bodiesArray[0]);
      console.log(self.bodiesArray[0].getWorldPosition());
      self.world.ClearForces();
      requestAnimationFrame(function() {
        return self.animation = self.update(self);
      });
      return 0;
    };

    Brain.prototype.test = function() {
      return console.log(ol√°);
    };

    Brain.prototype.convertWorldToCanvasFrame = function(scale, worldPosition) {
      var canvasPosition;
      return canvasPosition = {
        x: worldPosition.x * scale,
        y: worldPosition.y * scale
      };
    };

    return Brain;

  })();

  Body = (function() {
    function Body(world1, shape1, dimensions1, worldWidth, worldHeight) {
      this.world = world1;
      this.shape = shape1;
      this.dimensions = dimensions1;
      this.worldWidth = worldWidth;
      this.worldHeight = worldHeight;
    }

    Body.prototype.putBodyInTheWorld = function() {
      var bodyDef, fixture, halfSide, randomX, randomY;
      randomX = Math.random() * this.worldWidth;
      randomY = Math.random() * this.worldHeight;
      bodyDef = new b2BodyDef();
      bodyDef.type = Body.b2_dynamicBody;
      bodyDef.position.Set(randomX, randomY);
      this.body = this.world.CreateBody(bodyDef);
      fixture = new b2FixtureDef();
      fixture.density = 1.0;
      if (this.shape === "circle") {
        fixture.shape = new b2CircleShape(this.dimensions.radius);
      } else if (this.shape === "square") {
        halfSide = this.dimensions.side / 2;
        fixture.shape = new b2PolygonShape();
        fixture.shape.SetAsBox(halfSide, halfSide);
      }
      return this.body.CreateFixture(fixture);
    };

    Body.prototype.getWorldPosition = function() {
      return this.body.GetPosition();
    };

    return Body;

  })();

  World = (function() {
    function World(width1, height1, gravity1, sleep) {
      this.width = width1;
      this.height = height1;
      this.gravity = gravity1;
      this.sleep = sleep;
    }

    World.prototype.setWorld = function() {
      var gravity, world;
      gravity = new b2Vec2(this.gravity.x, this.gravity.y);
      return world = new b2World(gravity, this.sleep);
    };

    return World;

  })();

  CanvasView = (function() {
    function CanvasView() {}

    CanvasView.prototype.setCanvas = function() {
      var height, self, width;
      $('canvas').remove();
      $('<canvas></canvas>').appendTo('body');
      this.canvas = $('canvas');
      width = this.width = $(window).width();
      height = this.height = $(window).height();
      self = this;
      $(window).resize(function() {
        self.setCanvas();
        return 0;
      });
      this.canvas.attr({
        width: width,
        height: height
      });
      this.context = this.canvas[0].getContext('2d');
      return 0;
    };

    return CanvasView;

  })();

  giz = new Brain(30);

  giz.init();

}).call(this);
