
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-US">
<head>
<title>Top-down car physics - Box2D tutorials - iforce2d</title>
<meta http-equiv="content-type" content="application/xhtml; charset=UTF-8" />
<link rel="stylesheet" type="text/css" href="/sstyle.css" media="screen, print, projection" />
<link rel="stylesheet" type="text/css" href="/cstyle.css" media="screen, print, projection" />
<link rel="stylesheet" type="text/css" href="/style.css" media="screen, print, projection" />
<script type="text/javascript" src="/js/jquery-1.5.1.min.js"></script>
<script type="text/javascript" src="/js/jquery-ui-1.8.13.custom.min.js"></script>
<script type="text/javascript" src="/js/b2dtut.js"></script>
<!--
<script type="text/javascript" src="/rube/loaders/javascript/box2dweb.js"></script>
<script type="text/javascript" src="/rube/loaders/javascript/loadrube.js"></script>
<script type="text/javascript" src="/js/box2dweb_shortNames.js"></script>
<script type="text/javascript" src="/js/xmasheader.js"></script>
-->
<!--[if !IE 7]>
    <style type="text/css">
      #wrap {display:table;height:100%}
      </style>
<![endif]-->
</head>

<body>

<div id="wrap">

<div id="header">
  

<div class="limitwidth-colored">
  <div style="width:800px;margin:auto">
    <div style="border:1px solid #eee;margin-left:0">
      
      <table style="margin-left:0;border:1px solid #eee;"><tr><td>
      <br />
        <div style="font-size:34px">
          iforce2d
        </div>
      
      </td><td style="text-align:center;width:600px">
      
      <br />
      <br />
      <br />
      <span style="font-size:8px">&lt;# insert awesome header graphics #&gt;</span><br />
      
      </td></tr></table>
      <span style="font-size:10px"> Crushing immovable objects since 2011</span><br />      
      <br />
      
    </div>
  </div>
</div>
<br>

<!--
<div class="limitwidth">  
<canvas id="headercanvas" width="980" height="92">
  <div style="background-color:#eee">
  <div style="width:800px;margin:auto;background-color:#eee;">
    <div style="border:1px solid #eee;margin-left:0">
      
      <table style="margin-left:0;border:1px solid #eee;"><tr><td>
      <br />
        <div style="font-size:34px">
          iforce2d
        </div>
      
      </td><td style="text-align:center;width:600px">
      
      <br />
      <br />
      <br />
      <span style="font-size:8px">&lt;# insert awesome header graphics #&gt;</span><br />
      
      </td></tr></table>
      <span style="font-size:10px"> Crushing immovable objects since 2011</span><br />      
      <br />
      
    </div>
  </div>
  </div>
</canvas>
</div>
<div class="limitwidth" style="text-align:right">
  <a href="#" onclick="pause()">Pause</a>
</div>
-->
  <!--<div class="smallspacer">
  </div>-->	
</div>

<div id="topics">
  <!--<div style="color:red;text-align:center">Sep 1 2011 - The server recently suffered a hard drive crash so things are a bit messed up.<br />Some of the download links are missing. Please come back later to try them again.</div><br />-->
<div class="limitwidth">
    <a href="/b2dtut/">Box2D tutorials</a> |
    <a href="/cc2dxres/">Cocos2d-x resources</a> |
    <a href="/b2djson/">Box2D JSON loader</a> |
    <a href="/rube/">R.U.B.E Box2D editor</a> |
    <a href="/rube-free/">R.U.B.E free</a> |
    <a href="/b2dapps/">My apps</a> |
    <a href="/blog/">Blog</a> <span style="font-weight:bold;color:#f00;background-color:#ff0">!</span> |
    <a href="/b2djp/">日本語はこちら</a> |
    <a href="http://ohcoder.com/blog/categories/box2d-tutorials/">Box2D中文教程</a> <!-- |
    <a href="/rp2012/">Ron Paul 2012</a>-->
  </div>


<div style="height:6px"></div>

<div class="limitwidth-colored">
    <table style="margin-left:0"><tr>
        <td style="width:48px;text-align:center">
            <span style="color:#660099"><b>News</b></span>
        </td>
        <td>
            <span style="color:#900">Mar 20</span>: <img src="/image/window12.png" /> <a href="/rube">R.U.B.E v1.7</a> released. Instanciable objects!<br>
            <span style="color:#900">Feb 21</span>: Added <a href="/rube?panel=loaders">RUBE sample loader for Cocos2d-X v3.4</a>.<br>
            <span style="color:#900">Feb 17</span>: Funny Fists released in <a href="https://itunes.apple.com/us/app/funny-fists/id899838910?ls=1&mt=8">iOS App store</a> and <a href="https://play.google.com/store/apps/details?id=org.iforce2d.funnyfists">Google Play store</a>. (<a href="http://www.youtube.com/watch?v=37TAU85golw">YouTube video</a>)<br>
            
            <span style="color:#609"><b>2014</b></span><br>

            <span style="color:#900">May 25</span>: <a href="/rube">R.U.B.E v1.6</a> released. Samplers!<br>
            <span style="color:#900">May 12</span>: <a href="http://www.iforce2d.net/cc2dxres/otf">"On-the-fly" resource updating for Cocos2d-x</a><br>
            <span style="color:#900">Apr 22</span>: New blog post: <a href="/blog/2014-04-22">Inverted pendulum control</a><br>
            <span style="color:#900">Apr 7</span>: <a href="http://www.iforce2d.net/cc2dxres/screenlog">On-screen logging class for Cocos2d-x</a><br>
            <span style="color:#900">Mar 22</span>: <a href="http://www.downhillsupreme2.com/">Downhill Supreme 2</a> released for iOS and Android<br>
            <span style="color:#900">Jan 2</span>: YouTube video: <a href="http://www.youtube.com/watch?v=F-aDMZUVw0c">Making soft-body wheels in RUBE</a><br>
            
            <span style="color:#609"><b>2013</b></span><br>
            <span style="color:#900">Oct  6</span>: Check out <a href="http://www.youtube.com/watch?v=qow1iONAC3I">Supplyfront RTS</a>, my 7dRTS entry continued.<br>
            <span style="color:#900">Sep 26</span>: <a href="/rube">R.U.B.E v1.5</a> released. Customizable item labels, snap-to-grid, export filtering, full-text help search.<br>
            <span style="color:#900">Sep 18</span>: Added <a href="/rube?panel=loaders">RUBE sample loader for Cocos2d-X</a>.<br>
            
            <div class="morenews">
                <a href="#" class="toggleDivLinkAll" divid="morenews">More...</a><br>
            </div>
            <div class="morenews toggleDivContent">
                <!--<a href="#" class="toggleDivLinkAll" divid="morenews">Less...</a><br>-->
            
                <span style="color:#900">Sep 16</span>: Updated <a href="/rube?panel=loaders">RUBE sample loader for Cocos2d v2</a>.<br>
                <span style="color:#900">Aug 12</span>: <a href="http://zehfernando.com/2013/loading-and-running-r-u-b-e-scenes-with-nape-as3/">RUBE loader for Nape</a> by Zeh Fernando<br>
                <span style="color:#900">Aug  7</span>: Added <a href="/rube?panel=loaders">RUBE sample loader for SFML</a>.<br>
                <span style="color:#900">Jul 30</span>: Try my MiniLD <a href="http://www.ludumdare.com/compo/minild-44/?action=preview&uid=7091">7dRTS entry</a>.<br>
                <span style="color:#900">Jul 24</span>: Added <a href="/b2dtut/particles">physics-driven particles tutorial</a>.<br>
                <span style="color:#900">Jul 20</span>: New blog post: <a href="/blog/2013-07-20">rendering solid ground</a> (as in Downhill Supreme)<br>            
            
                <span style="color:#900">Jul 18</span>: <a href="/rube">R.U.B.E v1.4</a> released. Command-line interface for batch jobs, hotkeys for scripts, better script management.<br>
                <span style="color:#900">May 22</span>: <a href="http://www.downhillsupreme.com/">Downhill Supreme</a> is out now! (iOS)<br>    
                <span style="color:#900">Apr  2</span>: <a href="/rube">R.U.B.E v1.3</a> released. Collision bitplane editing, Cocos2d-iphone loader, usability improvements.<br>
                <span style="color:#900">Mar 11</span>: <a href="/rube">R.U.B.E v1.2</a> released. Now supports weld, friction, motor joints and automatic image reloading.<br>
                <span style="color:#900">Mar 10</span>: <a href="https://github.com/tescott/RubeLoader">RUBE loader for libGDX</a> by Tim Scott<br>
                <span style="color:#900">Jan 28</span>: New blog post: a functional <a href="/blog/2013-01-28">combustion engine</a>!<br>
                <span style="color:#900">Jan 22</span>: New blog post: <a href="/blog/2013-01-22">wind tunnel</a><br>
                <span style="color:#900">Jan 20</span>: Added <a href="/b2dtut/explosions">explosions tutorial</a>.<br>
                <span style="color:#900">Jan 16</span>: Added <a href="/b2dtut/buoyancy">buoyancy tutorial</a>.<br>
                <span style="color:#900">Jan 16</span>: AndEngine <a href="https://github.com/LouisBHirst/AndEngineJb2dJson">sample project</a> to load RUBE scene by Bart Hirst<br>                
                <span style="color:#900">Jan 14</span>: <a href="/rube">R.U.B.E v1.1</a> released, now supports custom properties.<br>
                <span style="color:#900">Jan 1</span>: All basic tutorials are now available in Chinese at <a href="http://ohcoder.com/blog/categories/box2d-tutorials/">ohcoder.com</a> Huge thankyou to <a href="https://twitter.com/OhCoder">@OhCoder</a>!<br>
                
                <span style="color:#609"><b>2012</b></span><br>
                <span style="color:#900">Dec 23</span>: <a href="/forums">Discussion forums</a> have been set up<br>
                <span style="color:#900">Dec 4</span>: R.U.B.E v1.0 is <a href="/rube">ready</a> !<br>
                <span style="color:#900">Dec 2</span>: YouTube video: <a href="http://www.youtube.com/watch?v=Oc9mzuWyPOI">Box2D pendulum clock</a><br>
                <span style="color:#900">Nov 26</span>: New blog post: <a href="/blog/2012-11-26">rocket platform thingy</a><br>
                <span style="color:#900">Nov 25</span>: <a href="http://www.youtube.com/watch?v=vEZhPpSCAMw">Video</a> of R.U.B.E scenes in Chipmunk.<br>
                <span style="color:#900">Nov 23</span>: A sample project to load R.U.B.E scenes into Chipmunk physics! <a href="/rube?panel=loaders">Details here</a>.<br>
                <span style="color:#900">Nov 14</span>: An XCode sample project to load R.U.B.E scenes on iOS is now available. <a href="/rube?panel=loaders">Details here</a>.<br>
                <span style="color:#900">Nov 11</span>: A Java version of b2dJson is now available, based on <a href="http://www.jbox2d.org/">JBox2D</a>.<br>
                <span style="color:#900">Nov  6</span>: A Javascript version of b2dJson based on box2dweb is now available. <a href="/rube/loaders/javascript">Demo here!</a><br>
                <span style="color:#900">Nov  2</span>: The full specification of the JSON format used by b2dJson can be found here: <a href="/rube/json-structure">b2dJson file structure</a><br>
                <span style="color:#900">Oct 28</span>: YouTube video: <a href="http://www.youtube.com/watch?v=7DXzlE68abA">2-minute ragdoll in R.U.B.E Box2D editor</a><br>
                <span style="color:#900">Sep 29</span>: YouTube video: <a href="http://www.youtube.com/watch?v=-S-pmWLLGrU">R.U.B.E Box2D editor usage example</a><br>                
            </div>
        </td>
    </tr></table>
</div>

<!--<div style="text-align:center">
    <span style="font-weight:bold;color:#f00;background-color:#ff0">New!</span>
    <a href="/rube/loaders/javascript">Box2D vehicles Javascript demo in your browser!</a> 
</div>-->

<div style="height:6px"></div>





</div>


<div id="main">

  <div class="limitwidth-colored">

    <table>
      <tr>
	<td>
	  
   <div id="sidebar">
	  <div id="menu">
   <b>Box2D tutorial topics</b>
<ul class="no-indent">
      <li>
            <a href="introduction">Introduction</a>      </li>
      <li>
            <a href="setup-linux">Setting up (Linux)</a>      </li>
      <li>
            <a href="setup-windows">Setting up (Windows)</a>      </li>
      <li>
            <a href="setup-osx">Setting up (Mac OSX)</a>      </li>
      <li>
            <a href="testbed-structure">Testbed structure</a>      </li>
      <li>
            <a href="making-a-test">Making a test</a>      </li>
      <li>
            <a href="bodies">Bodies</a>      </li>
      <li>
            <a href="fixtures">Fixtures</a>      </li>
      <li>
            <a href="worlds">World settings</a>      </li>
      <li>
            <a href="forces">Forces and impulses</a>      </li>
      <li>
            <a href="custom-gravity">Custom gravity</a>      </li>
      <li>
            <a href="constant-speed">Moving at constant speed</a>      </li>
      <li>
            <a href="rotate-to-angle">Rotating to a given angle</a>      </li>
      <li>
            <a href="jumping">Jumping</a>      </li>
      <li>
            <a href="debug-draw">Using debug draw</a>      </li>
      <li>
            <a href="drawing-objects">Drawing your own objects</a>      </li>
      <li>
            <a href="user-data">User data</a>      </li>
      <li>
            <a href="collision-anatomy">Anatomy of a collision</a>      </li>
      <li>
            <a href="collision-callbacks">Collision callbacks</a>      </li>
      <li>
            <a href="collision-filtering">Collision filtering</a>      </li>
      <li>
            <a href="sensors">Sensors</a>      </li>
      <li>
            <a href="raycasting">Ray casting</a>      </li>
      <li>
            <a href="world-querying">World querying</a>      </li>
      <li>
            <a href="removing-bodies">Removing bodies safely</a>      </li>
      <li>
            <a href="jumpability">The 'can I jump' question</a>      </li>
      <li>
            <a href="ghost-vertices">Ghost vertices</a>      </li>
      <li>
            <a href="joints-overview">Joints - overview</a>      </li>
      <li>
            <a href="joints-revolute">Joints - revolute</a>      </li>
      <li>
            <a href="joints-prismatic">Joints - prismatic</a>      </li>
      <div style="height:5px"></div>
      <hr style="width:60px" />
      <div style="height:3px"></div>
      <li><a href="gotchas">FAQ / gotchas</a></li>
      <div style="height:5px"></div>
      <hr style="width:60px" />
      <div style="height:3px"></div>
      <li><a href="sourcecode">Tutorial source code</a></li>
</ul>

<b>Advanced topics</b>
<ul class="no-indent">
      <li><a href="conveyor-belts">Conveyor belts</a></li>
      <li><a href="projected-trajectory">Projected trajectory</a></li>
      <li><a href="sticky-projectiles">Sticky projectiles</a></li>
      <li><a href="suspension">Hovercar suspension</a></li>
      <li><a href="top-down-car">Top-down car physics</a></li>
      <li><a href="one-way-walls">One-way walls</a></li>
      <li><a href="buoyancy">Buoyancy</a></li>
      <li><a href="explosions">Explosions</a></li>
      <li><a href="particles">Physics-driven particles</a> <!--<span style="font-weight:bold;color:#f00;background-color:#ff0">New!</span>--> </li>
</ul>

<b>Other topics</b>
<ul class="no-indent">
      <li><a href="setup-ios">Setting up (iPhone)</a></li>
</ul>

<!-- <span style="font-weight:bold;color:#f00;background-color:#ff0">New!</span> -->
<!-- <span style="font-weight:bold;color:#f90;background-color:#fff">wip</span> -->
	    <div id="smallspacer">
	    </div>
	  </div><!--menu-->
   </div><!--sidebar-->
	
    <div id="ads">
	<div id="ads">
    <a href="/lama/lama.php?id=8"><img src="/ads/bacterial.jpg" style="padding-top:5px;border-style:none" /></a>
    <a href="/lama/lama.php?id=7"><img src="/ads/ff.jpg" style="padding-top:5px;border-style:none" /></a>
    <a href="/lama/lama.php?id=6"><img src="/ads/moldbang.jpg" style="padding-top:5px;border-style:none" /></a>
    <a href="/lama/lama.php?id=5"><img src="/ads/dswoopers.jpg" style="padding-top:5px;border-style:none" /></a>
    <a href="/lama/lama.php?id=4"><img src="/ads/orr.jpg" style="padding-top:5px;border-style:none" /></a>
    <a href="/lama/lama.php?id=3"><img src="/ads/dhs.jpg" style="padding-top:5px;border-style:none" /></a>
    <!--<a href="/lama/lama.php?id=2"><img src="/ads/adhesion.jpg" style="padding-top:5px;border-style:none" /></a>-->
    <!--<a href="/lama/lama.php?id=1"><img src="/ads/gnomes.jpg" style="padding-top:5px;border-style:none" /></a>-->
    <div class="smallspacer"></div>


<!--
<script type="text/javascript">
google_ad_client = "ca-pub-4698710405296014";
/* temp */
google_ad_slot = "5343036479";
google_ad_width = 180;
google_ad_height = 90;

</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>    
-->

    
</div>
    </div>

	</td>
    <td>	  
      <div id="content">
	
	<div id="blog">
	    <div class="insert-title">
		<h2>Box2D C++ tutorials - Top-down car physics</h2>
		<span style="font-size:0.6em">Last edited: March 19 2014</span>		    
	    </div>
	    <br />
<div style="margin:auto;text-align:center">
  <div style="margin:auto;width:330px;height:58px;border:1px solid;vertical-align:middle">
    <div style="float:left">
    <div style="width:10px;float:left;border:1px solid #fff"></div>
    <img src="/image/flavie.png" />
    </div>
    <span style="font-size:0.9em">
    <br />
      Halt! You should have a good understanding of<br /> the basic tutorials before venturing further.
    </span>
  </div>
</div>
<br />
<br />



<h3>Top-down car physics</h3>
<br />

The discussion of how 'top down' car physics might be implemented in Box2D comes
up fairly often, so I thought I would give it a try and make a topic for it.
Usually a top-down car is modelled in a zero-gravity world, represented by one body
for the chassis and four separate bodies for the wheels. Depending on how realistic
a simulation is required it might be good enough to just use one body for the
chassis and not worry about having separate wheels.<br />
<br />
In either case the crux of the problem is preventing a body from moving in one local axis (tire
should not slide sideways) while still allowing it to move freely in the other
local axis (tire should be able move back and forwards). This in itself is not
such a difficult feat, but the trick is getting it to feel nice for the user when
they control the car. If the lateral velocity is simply killed completely the car
will feel like it's on rails, and we might actually want to allow the car to
skid in some situations, and behave differently on various surfaces etc.
Before we get started you might like to take a look at Doug Koellmer's excellent
implementation of top-down cars in Flash:
<a href="http://quickb2.dougkoellmer.com/bin/qb2DemoReel.swf">qb2DemoReel.swf</a>
(click the 'Next demo' button a couple of times). This is the kind of thing we're
aiming for.<br />
<br />
The basic procedure is to find the current lateral velocity of a body and apply an
impulse that will cancel out that velocity. We will start with just one body to
represent a tire, and later attach four of these to another body for a more complex
simulation. Since all the tires do the same thing we can make a class for them.
Here is the starting point, a class which has a b2Body pointer as a member variable
and sets it up with a simple box shape.
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="kw2">class</span> TDTire <span class="br0">&#123;</span>
&nbsp; <span class="kw2">public</span><span class="sy4">:</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">b2Body</span><span class="sy2">*</span> m_body<span class="sy4">;</span>
&nbsp; 
&nbsp; &nbsp; &nbsp; TDTire<span class="br0">&#40;</span><span class="kw4">b2World</span><span class="sy2">*</span> world<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">b2BodyDef</span> bodyDef<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bodyDef.<span class="me1">type</span> <span class="sy1">=</span> <span class="kw5">b2_dynamicBody</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m_body <span class="sy1">=</span> world<span class="sy2">-</span><span class="sy1">&gt;</span><span class="kw3">CreateBody</span><span class="br0">&#40;</span><span class="sy3">&amp;</span>bodyDef<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">b2PolygonShape</span> polygonShape<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; polygonShape.<span class="me1">SetAsBox</span><span class="br0">&#40;</span> <span class="nu17">0.5f</span>, <span class="nu17">1.25f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m_body<span class="sy2">-</span><span class="sy1">&gt;</span><span class="kw3">CreateFixture</span><span class="br0">&#40;</span><span class="sy3">&amp;</span>polygonShape, <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy4">;</span><span class="co1">//shape, density</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m_body<span class="sy2">-</span><span class="sy1">&gt;</span>SetUserData<span class="br0">&#40;</span> <span class="kw3">this</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; 
&nbsp; &nbsp; &nbsp; ~TDTire<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetWorld<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>DestroyBody<span class="br0">&#40;</span>m_body<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span><span class="sy4">;</span></pre></td></tr></tbody></table>Here I have used the shortcut version of CreateFixture which does not require a fixture def.
Note that we've also set the user data of the created b2Body to this class, so the physics
body and the game logic class both have a reference to each other.
<br />
<br />
<br />

<h3>Killing lateral velocity</h3>
<br />
To cancel out the lateral velocity we first need to know what it is. We can find
it by projecting the current velocity of the body onto the current normal vector for the
'sideways' direction of the tire. Let's say that in the local coordinates of the tire
(0,1) will be forwards and (1,0) will be rightwards. We can use GetWorldVector on these
to get the current orientation of these directions in world coordinates.

<img class="ss" alt="Box2D Top-down car physics" src="/image/topdown-localcoords.png" />

For example suppose the tire is rotated a little, and moving upwards as shown in the
next diagram. We want to 'project' the blue vector onto the red one to see how
long it would be if it was only going in the red vector's direction.
<br />

<img class="ss" alt="Box2D Top-down car physics" src="/image/topdown-projectlateral.png" />

So we can add a function like this to the tire class:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="kw4">b2Vec2</span> getLateralVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">b2Vec2</span> currentRightNormal <span class="sy1">=</span> m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetWorldVector<span class="br0">&#40;</span> <span class="kw4">b2Vec2</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">return</span> b2Dot<span class="br0">&#40;</span> currentRightNormal, m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetLinearVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="sy2">*</span> currentRightNormal<span class="sy4">;</span>
&nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table>
Okay, now to apply an impulse to get rid of that part of the velocity. This is very
similar to the final section of the <a href="constant-speed">moving at constant speed</a>
topic where we had a desired velocity, and we applied an impulse multiplied by the mass
of the body to make it reach that velocity in a single time step. Let's add a function to
the tire class that we can call every time step to let it do this:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="kw4">void</span> updateFriction<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">b2Vec2</span> impulse <span class="sy1">=</span> m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetMass<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">*</span> <span class="sy2">-</span>getLateralVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; m_body<span class="sy2">-</span><span class="sy1">&gt;</span>ApplyLinearImpulse<span class="br0">&#40;</span> impulse, m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetWorldCenter<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table>At this stage if you create one of these tires bodies in the world and try pushing it
around with the mouse you will notice that the sideways velocity is indeed 'killed' by
this impulse. If you push the tire in the forward direction you
will find that it tends to go around in a circle, almost like a real tire does as when
you roll it and it starts to lose speed.<br />
<br />You will also see that it is still free to
rotate around it's center as much as it likes which is a little unrealistic.
A real car tire doesn't really do that, so let's kill the angular velocity in
a similar way to the lateral velocity. Rotations are a little easier because we
don't have to do that vector projection stuff - add this to the updateFriction function:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
</pre></td><td class="de1"><pre class="de1">&nbsp; m_body<span class="sy2">-</span><span class="sy1">&gt;</span>ApplyAngularImpulse<span class="br0">&#40;</span> <span class="nu17">0.1f</span> <span class="sy2">*</span> m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetInertia<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">*</span> <span class="sy2">-</span>m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetAngularVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span></pre></td></tr></tbody></table>The value 0.1 is just something I decided on by playing around with it a bit to
get something that looked like what I remember seeing the last time I spun a car tire
around :) If we killed the rotation completely (try it) the tire looks
like it is on a rail and it can't go anywhere but in a straight line. Another
reason not to completely kill the rotation is that pretty soon
we will want to let the user turn this body to drive it around.<br />
<br />
Finally, you may have noticed that the tire is able to roll on forever in its 'forward'
direction, so let's apply a drag force to make it roll to a stop eventually.
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="kw4">b2Vec2</span> currentForwardNormal <span class="sy1">=</span> getForwardVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="kw4">float</span> currentForwardSpeed <span class="sy1">=</span> currentForwardNormal.<span class="me1">Normalize</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="kw4">float</span> dragForceMagnitude <span class="sy1">=</span> <span class="sy2">-</span><span class="nu0">2</span> <span class="sy2">*</span> currentForwardSpeed<span class="sy4">;</span>
&nbsp; m_body<span class="sy2">-</span><span class="sy1">&gt;</span>ApplyForce<span class="br0">&#40;</span> dragForceMagnitude <span class="sy2">*</span> currentForwardNormal, m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetWorldCenter<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span></pre></td></tr></tbody></table>Once again this goes in updateFriction and the value 2 comes from a bit of fiddling and
tweaking. Of course all you smart people out there automatically knew that getForwardVelocity()
is the same as getLateralVelocity() but works with a local vector of (0,1) instead
of (1,0) right?
<br />
<br />
<br />


<h3>Controlling a tire</h3>
<br />
Before we get to making a car with four tires, we need to take care of a few more
things that a single tire should do. We will at least need to make it move forward
and backwards,
and we would also like it to skid realistically and handle different surfaces too. Let's
focus on getting all of this working well with one tire, then it will be easy to set
up a car with four.<br />
<br />
To test situations where the tire is subject to a variety of movements we can first
pretend that this single tire itself is a car, and let the user rotate it directly.
Here is a basic way of keeping track of which keys (w/a/s/d) the user is
currently pressing:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="co1">//global scope</span>
&nbsp; <span class="kw5">enum</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; TDC_LEFT &nbsp; <span class="sy1">=</span> <span class="nu12">0x1</span>,
&nbsp; &nbsp; &nbsp; TDC_RIGHT &nbsp;<span class="sy1">=</span> <span class="nu12">0x2</span>,
&nbsp; &nbsp; &nbsp; TDC_UP &nbsp; &nbsp; <span class="sy1">=</span> <span class="nu12">0x4</span>,
&nbsp; &nbsp; &nbsp; TDC_DOWN &nbsp; <span class="sy1">=</span> <span class="nu12">0x8</span>
&nbsp; <span class="br0">&#125;</span><span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="co1">//testbed Test class variable</span>
&nbsp; <span class="kw4">int</span> m_controlState<span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="co1">//testbed Test class constructor</span>
&nbsp; m_controlState <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="co1">//testbed Test class functions</span>
&nbsp; <span class="kw4">void</span> Keyboard<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span> key<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">switch</span> <span class="br0">&#40;</span>key<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'a'</span> <span class="sy4">:</span> m_controlState <span class="sy3">|</span><span class="sy1">=</span> TDC_LEFT<span class="sy4">;</span> &nbsp;<span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'d'</span> <span class="sy4">:</span> m_controlState <span class="sy3">|</span><span class="sy1">=</span> TDC_RIGHT<span class="sy4">;</span> <span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'w'</span> <span class="sy4">:</span> m_controlState <span class="sy3">|</span><span class="sy1">=</span> TDC_UP<span class="sy4">;</span> &nbsp; &nbsp;<span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'s'</span> <span class="sy4">:</span> m_controlState <span class="sy3">|</span><span class="sy1">=</span> TDC_DOWN<span class="sy4">;</span> &nbsp;<span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">default</span><span class="sy4">:</span> Test<span class="sy4">::</span><span class="me2">Keyboard</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="kw4">void</span> KeyboardUp<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span> key<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">switch</span> <span class="br0">&#40;</span>key<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'a'</span> <span class="sy4">:</span> m_controlState <span class="sy3">&amp;</span><span class="sy1">=</span> ~TDC_LEFT<span class="sy4">;</span> &nbsp;<span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'d'</span> <span class="sy4">:</span> m_controlState <span class="sy3">&amp;</span><span class="sy1">=</span> ~TDC_RIGHT<span class="sy4">;</span> <span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'w'</span> <span class="sy4">:</span> m_controlState <span class="sy3">&amp;</span><span class="sy1">=</span> ~TDC_UP<span class="sy4">;</span> &nbsp; &nbsp;<span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> <span class="st0">'s'</span> <span class="sy4">:</span> m_controlState <span class="sy3">&amp;</span><span class="sy1">=</span> ~TDC_DOWN<span class="sy4">;</span> &nbsp;<span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">default</span><span class="sy4">:</span> Test<span class="sy4">::</span><span class="me2">Keyboard</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table><span style="font-size:0.8em">Note: KeyboardUp is available in the latest Box2D testbed, but if you are
using v2.1.2 from the other tutorials you won't find it. You can get the latest version of Box2D,
or add the function to the testbed yourself (it's easy, just mimic the Keyboard function :)</span><br />
<br />
Now let's add a function to the tire class to do something clever with that input state:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="co1">//tire class variables</span>
&nbsp; <span class="kw4">float</span> m_maxForwardSpeed<span class="sy4">;</span> &nbsp;<span class="co1">// 100;</span>
&nbsp; <span class="kw4">float</span> m_maxBackwardSpeed<span class="sy4">;</span> <span class="co1">// -20;</span>
&nbsp; <span class="kw4">float</span> m_maxDriveForce<span class="sy4">;</span> &nbsp; &nbsp;<span class="co1">// 150;</span>
&nbsp; 
&nbsp; <span class="co1">//tire class function</span>
&nbsp; <span class="kw4">void</span> updateDrive<span class="br0">&#40;</span><span class="kw4">int</span> controlState<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="co1">//find desired speed</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">float</span> desiredSpeed <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">switch</span> <span class="br0">&#40;</span> controlState <span class="sy3">&amp;</span> <span class="br0">&#40;</span>TDC_UP<span class="sy3">|</span>TDC_DOWN<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> TDC_UP<span class="sy4">:</span> &nbsp; desiredSpeed <span class="sy1">=</span> m_maxForwardSpeed<span class="sy4">;</span> &nbsp;<span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> TDC_DOWN<span class="sy4">:</span> desiredSpeed <span class="sy1">=</span> m_maxBackwardSpeed<span class="sy4">;</span> <span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">default</span><span class="sy4">:</span> <span class="kw1">return</span><span class="sy4">;</span><span class="co1">//do nothing</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; <span class="co1">//find current speed in forward direction</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">b2Vec2</span> currentForwardNormal <span class="sy1">=</span> m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetWorldVector<span class="br0">&#40;</span> <span class="kw4">b2Vec2</span><span class="br0">&#40;</span><span class="nu0">0</span>,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">float</span> currentSpeed <span class="sy1">=</span> b2Dot<span class="br0">&#40;</span> getForwardVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span>, currentForwardNormal <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; <span class="co1">//apply necessary force</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">float</span> force <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span> desiredSpeed <span class="sy1">&gt;</span> currentSpeed <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; force <span class="sy1">=</span> m_maxDriveForce<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> desiredSpeed <span class="sy1">&lt;</span> currentSpeed <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; force <span class="sy1">=</span> <span class="sy2">-</span>m_maxDriveForce<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; m_body<span class="sy2">-</span><span class="sy1">&gt;</span>ApplyForce<span class="br0">&#40;</span> force <span class="sy2">*</span> currentForwardNormal, m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetWorldCenter<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table>Play around with the speed and force values to get something you like. At the start of
the topic I wasn't thinking about dimensions too much and my tire is a rather unrealistic
one meter wide, so those speeds are not real-world values either.<br />
<br />
Now that the tire can move back and forwards, let's also make it turn by applying
some torque when the a/d keys are pressed. Because our end-goal is to attach these tires
to a car body, this part of the program will be dropped soon so it's just a crude
way to get some turning happening so we can test the next part - skidding and surfaces.
On the other hand if you were actually intending to model the car as a single body,
you would want to refine this to be more sensible, eg. not letting the car turn
unless it is moving etc.
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="kw4">void</span> updateTurn<span class="br0">&#40;</span><span class="kw4">int</span> controlState<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">float</span> desiredTorque <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">switch</span> <span class="br0">&#40;</span> controlState <span class="sy3">&amp;</span> <span class="br0">&#40;</span>TDC_LEFT<span class="sy3">|</span>TDC_RIGHT<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> TDC_LEFT<span class="sy4">:</span> &nbsp;desiredTorque <span class="sy1">=</span> <span class="nu0">15</span><span class="sy4">;</span> &nbsp;<span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">case</span> TDC_RIGHT<span class="sy4">:</span> desiredTorque <span class="sy1">=</span> <span class="sy2">-</span><span class="nu0">15</span><span class="sy4">;</span> <span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">default</span><span class="sy4">:</span> <span class="sy4">;</span><span class="co1">//nothing</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; m_body<span class="sy2">-</span><span class="sy1">&gt;</span>ApplyTorque<span class="br0">&#40;</span> desiredTorque <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table><br />
<br />

<h3>Allowing skidding</h3>
<br />
At this point we have a controllable body which behaves very well according
to our original plan of killing the lateral velocity. This is all very well if
you want to simulate slot-cars which stick to their track like glue, but it feels
a bit more natural if the car can skid a bit. Unfortunately this is really really hard...
haha just kidding. Actually we have already done it - remember how when we killed the
lateral velocity we killed it completely, right? We simply calculated the
necessary impulse and applied it, like a boss. That's not very realistic
because it means the tire will <em>never</em> slip sideways. So all we need
to do is restrict that impulse to some maximum value, and the tire will
slip when the circumstances require a greater correction than allowable.
This is only one extra statement in the updateFriction function:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="co1">//in updateFriction, lateral velocity handling section</span>
&nbsp; <span class="kw4">b2Vec2</span> impulse <span class="sy1">=</span> m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetMass<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">*</span> <span class="sy2">-</span>getLateralVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">//existing code</span>
&nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span> impulse.<span class="me1">Length</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">&gt;</span> maxLateralImpulse <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; impulse <span class="sy2">*</span><span class="sy1">=</span> maxLateralImpulse <span class="sy2">/</span> impulse.<span class="me1">Length</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; m_body<span class="sy2">-</span><span class="sy1">&gt;</span>ApplyLinearImpulse<span class="br0">&#40;</span> impulse, m_body<span class="sy2">-</span><span class="sy1">&gt;</span>GetWorldCenter<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">//existing code</span></pre></td></tr></tbody></table>I found that a value of 3 for the maxLateralImpulse would allow only a very small
amount of skidding when turning at high speeds, a value of about 2 gave an effect
like a wet road, and a value of 1 reminded me of a speedboat turning on water.
These values will need to be adjusted when the wheels are joined
to the car chassis anyway, so don't get too fussy with them just yet.<br />
<br />
<a href="/src/iforce2d_TopdownCar_singleTireSingleSurface.h">Source code up to this point</a><br />
<br />
<br />





<a name="varying-surfaces"></a>
<a name="complex-user-data1"></a>
<h3>Setting up varying surfaces (complex user data part 1)</h3>
<br />
To define certain areas of the scene as different surfaces we'll need to make some
fixtures on the 'ground' body and use a contact listener to keep track of when the
wheel is touching them. This is very similar to the <a href="jumpability">jumpability</a>
topic where we use a sensor fixture attached to the bottom of the player to check
what they are standing on. The only difference this time is that the fixture on the
ground is a sensor (because we need to drive over it) and the player (car) is solid
because we want it to crash into stuff.<br />
<br />
So we could set a user data tag as a simple integer like in the 'jumpability' topic to
mark certain fixtures as ground areas, and then whenever our contact listener gets a
BeginContact/EndContact we can check that tag to see if the tire has entered/left the ground area.
However, that kind of simple method only works when you can be absolutely sure that
the user data set in the fixture is an integer tag. In a proper game you
are likely to have many kinds of fixtures bumping into each other.<br />
<br />It would be nice to have more information than just a single integer
in the user data, eg. as well as the surface friction type we might like to know if the car went
off course or into the audience stands etc. We also would like to be able to change
this info without needing Box2D's SetUserData function every time, for example if some aspect of
the ground area was to change over time (eg. wet area gradually dries up).<br />
<br />
There are various ways you could handle this. It's not really a whole lot to do with
the topic at hand, but since I haven't covered it in detail anywhere else yet
I will take this opportunity to show the way I often do it. I'm not sure if
there is any typical or recommended method, but this usually works ok. We create a generic
class to use for fixture data...
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="co1">//types of fixture user data</span>
&nbsp; <span class="kw5">enum</span> fixtureUserDataType <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; FUD_CAR_TIRE,
&nbsp; &nbsp; &nbsp; FUD_GROUND_AREA
&nbsp; <span class="br0">&#125;</span><span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="co1">//a class to allow subclassing of different fixture user data</span>
&nbsp; <span class="kw2">class</span> FixtureUserData <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; fixtureUserDataType m_type<span class="sy4">;</span>
&nbsp; <span class="kw2">protected</span><span class="sy4">:</span>
&nbsp; &nbsp; &nbsp; FixtureUserData<span class="br0">&#40;</span>fixtureUserDataType type<span class="br0">&#41;</span> <span class="sy4">:</span> m_type<span class="br0">&#40;</span>type<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span>
&nbsp; <span class="kw2">public</span><span class="sy4">:</span>
&nbsp; &nbsp; &nbsp; <span class="kw2">virtual</span> fixtureUserDataType getType<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> m_type<span class="sy4">;</span> <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; <span class="kw2">virtual</span> ~FixtureUserData<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span><span class="sy4">;</span></pre></td></tr></tbody></table>... and then create subclasses of that to store specific types of fixture and their related info:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="co1">//class to allow marking a fixture as a car tire</span>
&nbsp; <span class="kw2">class</span> CarTireFUD <span class="sy4">:</span> <span class="kw2">public</span> FixtureUserData <span class="br0">&#123;</span>
&nbsp; <span class="kw2">public</span><span class="sy4">:</span>
&nbsp; &nbsp; &nbsp; CarTireFUD<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy4">:</span> FixtureUserData<span class="br0">&#40;</span>FUD_CAR_TIRE<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span><span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="co1">//class to allow marking a fixture as a ground area</span>
&nbsp; <span class="kw2">class</span> GroundAreaFUD <span class="sy4">:</span> <span class="kw2">public</span> FixtureUserData <span class="br0">&#123;</span>
&nbsp; <span class="kw2">public</span><span class="sy4">:</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">float</span> frictionModifier<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">bool</span> outOfCourse<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; GroundAreaFUD<span class="br0">&#40;</span><span class="kw4">float</span> fm, <span class="kw4">bool</span> ooc<span class="br0">&#41;</span> <span class="sy4">:</span> FixtureUserData<span class="br0">&#40;</span>FUD_GROUND_AREA<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; frictionModifier <span class="sy1">=</span> fm<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; outOfCourse <span class="sy1">=</span> ooc<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span><span class="sy4">;</span></pre></td></tr></tbody></table><br />
We will not be using the 'out of course' setting of the ground areas in this topic, I just added that
to make it clear that now you can put a whole bunch of information in the fixture user data.
Here is how you would set up a couple of static ground area fixtures and
set their fixture user data with the class above:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="kw4">b2BodyDef</span> bodyDef<span class="sy4">;</span>
&nbsp; m_groundBody <span class="sy1">=</span> m_world<span class="sy2">-</span><span class="sy1">&gt;</span><span class="kw3">CreateBody</span><span class="br0">&#40;</span> <span class="sy3">&amp;</span>bodyDef <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="kw4">b2PolygonShape</span> polygonShape<span class="sy4">;</span>
&nbsp; <span class="kw4">b2FixtureDef</span> fixtureDef<span class="sy4">;</span>
&nbsp; fixtureDef.<span class="me1">shape</span> <span class="sy1">=</span> <span class="sy3">&amp;</span>polygonShape<span class="sy4">;</span>
&nbsp; fixtureDef.<span class="me1">isSensor</span> <span class="sy1">=</span> <span class="kw5">true</span><span class="sy4">;</span>
&nbsp; 
&nbsp; polygonShape.<span class="me1">SetAsBox</span><span class="br0">&#40;</span> <span class="nu0">9</span>, <span class="nu0">7</span>, <span class="kw4">b2Vec2</span><span class="br0">&#40;</span><span class="sy2">-</span><span class="nu0">10</span>,<span class="nu0">15</span><span class="br0">&#41;</span>, <span class="nu0">20</span><span class="sy2">*</span>DEGTORAD <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="kw4">b2Fixture</span><span class="sy2">*</span> groundAreaFixture <span class="sy1">=</span> groundBody<span class="sy2">-</span><span class="sy1">&gt;</span><span class="kw3">CreateFixture</span><span class="br0">&#40;</span><span class="sy3">&amp;</span>fixtureDef<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; groundAreaFixture<span class="sy2">-</span><span class="sy1">&gt;</span>SetUserData<span class="br0">&#40;</span> <span class="kw3">new</span> GroundAreaFUD<span class="br0">&#40;</span> <span class="nu17">0.5f</span>, <span class="kw5">false</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; 
&nbsp; polygonShape.<span class="me1">SetAsBox</span><span class="br0">&#40;</span> <span class="nu0">9</span>, <span class="nu0">5</span>, <span class="kw4">b2Vec2</span><span class="br0">&#40;</span><span class="nu0">5</span>,<span class="nu0">20</span><span class="br0">&#41;</span>, <span class="sy2">-</span><span class="nu0">40</span><span class="sy2">*</span>DEGTORAD <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; groundAreaFixture <span class="sy1">=</span> groundBody<span class="sy2">-</span><span class="sy1">&gt;</span><span class="kw3">CreateFixture</span><span class="br0">&#40;</span><span class="sy3">&amp;</span>fixtureDef<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; groundAreaFixture<span class="sy2">-</span><span class="sy1">&gt;</span>SetUserData<span class="br0">&#40;</span> <span class="kw3">new</span> GroundAreaFUD<span class="br0">&#40;</span> <span class="nu17">0.2f</span>, <span class="kw5">false</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span></pre></td></tr></tbody></table>
<img class="ss" alt="Box2D Top-down car physics" src="/image/topdown-groundareas.png" />

<a name="implicit-destruction"></a>
You might have noticed that we have used 'new' to create the user data object but we didn't
keep a reference to it. Sure, Box2D has the reference but it will not take care of
deleting this object when we're done with it, which could cause a memory leak.
One way to take care of this is by being very careful when we destroy bodies and
fixtures, to get this pointer back from Box2D and delete it. That's kind of a
nuisance, especially for pointers that will almost always be deleted when the fixture
itself is destroyed.<br />
<br />
Fortunately Erin is a few steps ahead of us already. The Box2D world has a 'destruction
listener' which we can use to make the engine call a function every time it destroys a
fixture as a result of deleting the body that fixture belonged to.
This is another thing I haven't covered in detail yet so let's take a look at it now.
We need to make a subclass of the b2DestructionListener class, implement the SayGoodbye(b2Fixture*)
function, and set an instance of this class in the world with SetDestructionListener:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="co1">//global scope</span>
&nbsp; <span class="kw2">class</span> MyDestructionListener <span class="sy4">:</span> <span class="kw2">public</span> b2DestructionListener
&nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">void</span> SayGoodbye<span class="br0">&#40;</span><span class="kw4">b2Fixture</span><span class="sy2">*</span> fixture<span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span> FixtureUserData<span class="sy2">*</span> fud <span class="sy1">=</span> <span class="br0">&#40;</span>FixtureUserData<span class="sy2">*</span><span class="br0">&#41;</span>fixture<span class="sy2">-</span><span class="sy1">&gt;</span>GetUserData<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw3">delete</span> fud<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; <span class="co1">//(unused, but we must implement all pure virtual functions)</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">void</span> SayGoodbye<span class="br0">&#40;</span><span class="kw4">b2Joint</span><span class="sy2">*</span> joint<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span> 
&nbsp; <span class="br0">&#125;</span><span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="co1">//testbed Test class variable</span>
&nbsp; MyDestructionListener m_destructionListener<span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="co1">//in testbed Test class constructor</span>
&nbsp; m_world<span class="sy2">-</span><span class="sy1">&gt;</span>SetDestructionListener<span class="br0">&#40;</span><span class="sy3">&amp;</span>m_destructionListener<span class="br0">&#41;</span><span class="sy4">;</span></pre></td></tr></tbody></table>Now we can add a destructor to the testbed class to destroy bodies, and this will
take care of deleting the user data in all associated fixtures.
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
</pre></td><td class="de1"><pre class="de1">&nbsp; ~iforce2d_TopdownCar<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; m_world<span class="sy2">-</span><span class="sy1">&gt;</span>DestroyBody<span class="br0">&#40;</span> m_groundBody <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table>For this small scene it's not such a big win but in more complex scenes it can be quite
helpful. There are some <b>things to be careful of when using this method</b> - for example if
you destroy a fixture explicitly yourself with DestroyFixture this callback will not be
called, and it is also not called when you delete the world itself.
Check out the section on 'Implicit destruction' in the 'Loose Ends' section of the
<a href="http://box2d.org/documentation.html">user manual</a> for more details.<br />
<br />
<br />

<a name="complex-user-data1"></a>
<h3>Handling varying surfaces (complex user data part 2)</h3>
<br />
Now that we have fixtures set up with various kinds of user data, we'll need
to handle these cases when things collide. This is another area where there is no
official or best way to handle things, but I will continue with the way I often
do it which works ok.<br />
<br />
<a href="collision-callbacks">Contact listeners</a> have been covered in other
topics so I won't go into the details here. What we are trying to do is set up
a function to handle each case of contact (begin/end) between the types of fixtures we
have so that we can concentrate on the game logic, eg. in this scene we only
have two types so one function will suffice:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="co1">//testbed Test class, or global scope</span>
&nbsp; <span class="kw4">void</span> tire_vs_groundArea<span class="br0">&#40;</span><span class="kw4">b2Fixture</span><span class="sy2">*</span> tireFixture, <span class="kw4">b2Fixture</span><span class="sy2">*</span> groundAreaFixture, <span class="kw4">bool</span> began<span class="br0">&#41;</span><span class="sy4">;</span></pre></td></tr></tbody></table>Alternatively you could make this a function of the tire class, pass it just the ground fixture parameter only
and let the tire do whatever it needed to do. You could also have a function in the
ground area class (if we had one) to let it do something, just as long as the tire and
the ground don't start telling each other what to do - that would get messy. I feel it is
clearer to have one point of control which tells both of the entities involved what to do.<br />
<br />
Anyhow, to get this function called correctly is just a matter of checking the fixture user
data in your contact listener's BeginContact/EndContact functions. In this topic we only
care about when contacts begin/end so we can save repeating some code...
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="kw4">void</span> handleContact<span class="br0">&#40;</span><span class="kw4">b2Contact</span><span class="sy2">*</span> contact, <span class="kw4">bool</span> began<span class="br0">&#41;</span>
&nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">b2Fixture</span><span class="sy2">*</span> a <span class="sy1">=</span> contact<span class="sy2">-</span><span class="sy1">&gt;</span>GetFixtureA<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">b2Fixture</span><span class="sy2">*</span> b <span class="sy1">=</span> contact<span class="sy2">-</span><span class="sy1">&gt;</span>GetFixtureB<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; FixtureUserData<span class="sy2">*</span> fudA <span class="sy1">=</span> <span class="br0">&#40;</span>FixtureUserData<span class="sy2">*</span><span class="br0">&#41;</span>a<span class="sy2">-</span><span class="sy1">&gt;</span>GetUserData<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; FixtureUserData<span class="sy2">*</span> fudB <span class="sy1">=</span> <span class="br0">&#40;</span>FixtureUserData<span class="sy2">*</span><span class="br0">&#41;</span>b<span class="sy2">-</span><span class="sy1">&gt;</span>GetUserData<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; 
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span> <span class="sy3">!</span>fudA <span class="sy3">||</span> <span class="sy3">!</span>fudB <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">return</span><span class="sy4">;</span>
&nbsp; 
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span> fudA<span class="sy2">-</span><span class="sy1">&gt;</span>getType<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">==</span> FUD_CAR_TIRE <span class="sy3">&amp;&amp;</span> fudB<span class="sy2">-</span><span class="sy1">&gt;</span>getType<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">==</span> FUD_GROUND_AREA <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tire_vs_groundArea<span class="br0">&#40;</span>a, b, began<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> fudA<span class="sy2">-</span><span class="sy1">&gt;</span>getType<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">==</span> FUD_GROUND_AREA <span class="sy3">&amp;&amp;</span> fudB<span class="sy2">-</span><span class="sy1">&gt;</span>getType<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">==</span> FUD_CAR_TIRE <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tire_vs_groundArea<span class="br0">&#40;</span>b, a, began<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="br0">&#125;</span>
&nbsp; 
&nbsp; <span class="kw4">void</span> BeginContact<span class="br0">&#40;</span><span class="kw4">b2Contact</span><span class="sy2">*</span> contact<span class="br0">&#41;</span> <span class="br0">&#123;</span> handleContact<span class="br0">&#40;</span>contact, <span class="kw5">true</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="br0">&#125;</span>
&nbsp; <span class="kw4">void</span> EndContact<span class="br0">&#40;</span><span class="kw4">b2Contact</span><span class="sy2">*</span> contact<span class="br0">&#41;</span> <span class="br0">&#123;</span> handleContact<span class="br0">&#40;</span>contact, <span class="kw5">false</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="br0">&#125;</span></pre></td></tr></tbody></table>Nice. Now the tire_vs_groundArea function needs to do something. We want to keep
track of what is currently under the tire, so the tire should keep a set of
GroundAreaFUD references. It will also need to have a current traction status,
and should adjust this traction when the ground area changes:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="co1">//tire class variables</span>
&nbsp; std<span class="sy4">::</span><span class="me2">set</span><span class="sy1">&lt;</span>GroundAreaFUD<span class="sy2">*</span><span class="sy1">&gt;</span> m_groundAreas<span class="sy4">;</span>
&nbsp; <span class="kw4">float</span> m_currentTraction<span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="co1">//tire class constructor</span>
&nbsp; m_currentTraction <span class="sy1">=</span> <span class="nu0">1</span><span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="co1">//tire class functions</span>
&nbsp; <span class="kw4">void</span> addGroundArea<span class="br0">&#40;</span>GroundAreaFUD<span class="sy2">*</span> ga<span class="br0">&#41;</span> <span class="br0">&#123;</span> m_groundAreas.<span class="me1">insert</span><span class="br0">&#40;</span>ga<span class="br0">&#41;</span><span class="sy4">;</span> updateTraction<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="br0">&#125;</span>
&nbsp; <span class="kw4">void</span> removeGroundArea<span class="br0">&#40;</span>GroundAreaFUD<span class="sy2">*</span> ga<span class="br0">&#41;</span> <span class="br0">&#123;</span> m_groundAreas.<span class="me1">erase</span><span class="br0">&#40;</span>ga<span class="br0">&#41;</span><span class="sy4">;</span> updateTraction<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="br0">&#125;</span>
&nbsp; <span class="kw4">void</span> updateTraction<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span> m_groundAreas.<span class="me1">empty</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m_currentTraction <span class="sy1">=</span> <span class="nu0">1</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">else</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//find area with highest traction</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m_currentTraction <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std<span class="sy4">::</span><span class="me2">set</span><span class="sy1">&lt;</span>GroundAreaFUD<span class="sy2">*</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">iterator</span> it <span class="sy1">=</span> m_groundAreas.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">while</span> <span class="br0">&#40;</span>it <span class="sy3">!</span><span class="sy1">=</span> m_groundAreas.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GroundAreaFUD<span class="sy2">*</span> ga <span class="sy1">=</span> <span class="sy2">*</span>it<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span> ga<span class="sy2">-</span><span class="sy1">&gt;</span>frictionModifier <span class="sy1">&gt;</span> m_currentTraction <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m_currentTraction <span class="sy1">=</span> ga<span class="sy2">-</span><span class="sy1">&gt;</span>frictionModifier<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="sy2">++</span>it<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table>
<span style="font-size:0.8em">I should point out here that since the tire class holds
references to ground area fixture user data pointers there could be trouble if you delete a
body that the tire is currently on top of, because the fixture's user data will
become invalid due to our destruction listener. Ideally, every tire in the world should get a
removeGroundArea call for the ground area fixture user data which got deleted.</span><br />
<br />
Almost there... now we just need to fill in the tire_vs_groundArea function with
the logic to kick this off. The implementation of this is made more straightforward due
to the fact that we know what type of fixtures we have been given and we can make some
assumptions without needing to check everything:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="kw4">void</span> tire_vs_groundArea<span class="br0">&#40;</span><span class="kw4">b2Fixture</span><span class="sy2">*</span> tireFixture, <span class="kw4">b2Fixture</span><span class="sy2">*</span> groundAreaFixture, <span class="kw4">bool</span> began<span class="br0">&#41;</span>
&nbsp; <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; TDTire<span class="sy2">*</span> tire <span class="sy1">=</span> <span class="br0">&#40;</span>TDTire<span class="sy2">*</span><span class="br0">&#41;</span>tireFixture<span class="sy2">-</span><span class="sy1">&gt;</span>GetBody<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetUserData<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; GroundAreaFUD<span class="sy2">*</span> gaFud <span class="sy1">=</span> <span class="br0">&#40;</span>GroundAreaFUD<span class="sy2">*</span><span class="br0">&#41;</span>groundAreaFixture<span class="sy2">-</span><span class="sy1">&gt;</span>GetUserData<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">if</span> <span class="br0">&#40;</span> began <span class="br0">&#41;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tire<span class="sy2">-</span><span class="sy1">&gt;</span>addGroundArea<span class="br0">&#40;</span> gaFud <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">else</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tire<span class="sy2">-</span><span class="sy1">&gt;</span>removeGroundArea<span class="br0">&#40;</span> gaFud <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table>Giving this a try should result in the current highest traction surface being reported.

<img class="ss" alt="Box2D Top-down car physics" src="/image/topdown-traction.png" />

To finish off, use the current traction variable of the tire class to modify the amount
of friction, drag and power applied in the updateFriction and updateDrive functions of the tire class. To keep
things simple I just multiplied each final value given to the force/impulse functions by
the traction variable. As long as we keep the traction variable between zero and one this
should make sense.<br />
<br />
<a href="/src/iforce2d_TopdownCar_singleTireVaryingSurfaces.h">Source code up to this point</a><br />
<br />
<br />




<h3>Putting it together</h3>
<br />
So we have a nice tire that can drive and slide around. Depending on what you're making,
with a bit of tweaking this might be enough for some games, but I don't think it's what
you really came here for... the fun really starts when we put four of these tires on a car
body to act independently. Fortunately the hard parts have all been covered already, and all
we need to do now is set up the body and direct the control input a bit differently.<br />
<br />
Let's start with a car with four fixed wheels, then we can handle the steering after that.
We'll need a class to represent a car:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="kw2">class</span> TDCar <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw4">b2Body</span><span class="sy2">*</span> m_body<span class="sy4">;</span>
&nbsp; <span class="kw2">public</span><span class="sy4">:</span>
&nbsp; &nbsp; &nbsp; TDCar<span class="br0">&#40;</span><span class="kw4">b2World</span><span class="sy2">*</span> world<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">//create car body</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">b2BodyDef</span> bodyDef<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bodyDef.<span class="me1">type</span> <span class="sy1">=</span> <span class="kw5">b2_dynamicBody</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m_body <span class="sy1">=</span> world<span class="sy2">-</span><span class="sy1">&gt;</span><span class="kw3">CreateBody</span><span class="br0">&#40;</span><span class="sy3">&amp;</span>bodyDef<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">b2Vec2</span> vertices<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vertices<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>.<span class="me1">Set</span><span class="br0">&#40;</span> <span class="nu16">1.5</span>, &nbsp; <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vertices<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>.<span class="me1">Set</span><span class="br0">&#40;</span> &nbsp; <span class="nu0">3</span>, <span class="nu16">2.5</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vertices<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span>.<span class="me1">Set</span><span class="br0">&#40;</span> <span class="nu16">2.8</span>, <span class="nu16">5.5</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vertices<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span>.<span class="me1">Set</span><span class="br0">&#40;</span> &nbsp; <span class="nu0">1</span>, &nbsp;<span class="nu0">10</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vertices<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span>.<span class="me1">Set</span><span class="br0">&#40;</span> &nbsp;<span class="sy2">-</span><span class="nu0">1</span>, &nbsp;<span class="nu0">10</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vertices<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span>.<span class="me1">Set</span><span class="br0">&#40;</span><span class="sy2">-</span><span class="nu16">2.8</span>, <span class="nu16">5.5</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vertices<span class="br0">&#91;</span><span class="nu0">6</span><span class="br0">&#93;</span>.<span class="me1">Set</span><span class="br0">&#40;</span> &nbsp;<span class="sy2">-</span><span class="nu0">3</span>, <span class="nu16">2.5</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vertices<span class="br0">&#91;</span><span class="nu0">7</span><span class="br0">&#93;</span>.<span class="me1">Set</span><span class="br0">&#40;</span><span class="sy2">-</span><span class="nu16">1.5</span>, &nbsp; <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">b2PolygonShape</span> polygonShape<span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; polygonShape.<span class="me1">Set</span><span class="br0">&#40;</span> vertices, <span class="nu0">8</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">b2Fixture</span><span class="sy2">*</span> fixture <span class="sy1">=</span> m_body<span class="sy2">-</span><span class="sy1">&gt;</span><span class="kw3">CreateFixture</span><span class="br0">&#40;</span><span class="sy3">&amp;</span>polygonShape, <span class="nu17">0.1f</span><span class="br0">&#41;</span><span class="sy4">;</span><span class="co1">//shape, density</span>
&nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="br0">&#125;</span><span class="sy4">;</span></pre></td></tr></tbody></table>
<img class="ss" alt="Box2D Top-down car physics" src="/image/topdown-chassis.png" />

Next the tires are created and attached. Eventually we will want to
turn the front wheels so we should keep a reference to the front wheel joints.
For now we'll just keep all the joints fixed by setting the same value for lowerAngle
and upperAngle. The back wheels could also be weld joints.
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="co1">//car class variables</span>
&nbsp; std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span>TDTire<span class="sy2">*</span><span class="sy1">&gt;</span> m_tires<span class="sy4">;</span>
&nbsp; <span class="kw4">b2RevoluteJoint</span> <span class="sy2">*</span>flJoint, <span class="sy2">*</span>frJoint<span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="co1">//car class constructor</span>
&nbsp; <span class="kw4">b2RevoluteJointDef</span> jointDef<span class="sy4">;</span>
&nbsp; jointDef.<span class="me1">bodyA</span> <span class="sy1">=</span> m_body<span class="sy4">;</span>
&nbsp; jointDef.<span class="me1">enableLimit</span> <span class="sy1">=</span> <span class="kw5">true</span><span class="sy4">;</span>
&nbsp; jointDef.<span class="me1">lowerAngle</span> <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span><span class="co1">//with both these at zero...</span>
&nbsp; jointDef.<span class="me1">upperAngle</span> <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span><span class="co1">//...the joint will not move</span>
&nbsp; jointDef.<span class="me1">localAnchorB</span>.<span class="me1">SetZero</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span><span class="co1">//joint anchor in tire is always center</span>
&nbsp; 
&nbsp; TDTire<span class="sy2">*</span> tire <span class="sy1">=</span> <span class="kw3">new</span> TDTire<span class="br0">&#40;</span>world<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; jointDef.<span class="me1">bodyB</span> <span class="sy1">=</span> tire<span class="sy2">-</span><span class="sy1">&gt;</span>m_body<span class="sy4">;</span>
&nbsp; jointDef.<span class="me1">localAnchorA</span>.<span class="me1">Set</span><span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu0">3</span>, <span class="nu17">8.5f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; flJoint <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">b2RevoluteJoint</span><span class="sy2">*</span><span class="br0">&#41;</span>world<span class="sy2">-</span><span class="sy1">&gt;</span>CreateJoint<span class="br0">&#40;</span> <span class="sy3">&amp;</span>jointDef <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; m_tires.<span class="me1">push_back</span><span class="br0">&#40;</span>tire<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; 
&nbsp; <span class="co1">// (...other tires are similar...)</span></pre></td></tr></tbody></table>
<img class="ss" alt="Box2D Top-down car physics" src="/image/topdown-wheels.png" />

Clearly, this fine machine is modeled on uh... a Ferrari. One of those old ones, you know.
No it doesn't look like a frog, I don't see any resemblance at all. Anyway, let's add a
function to take the input from the main loop and direct it to the wheels:

<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="co1">//car class function</span>
&nbsp; <span class="kw4">void</span> update<span class="br0">&#40;</span><span class="kw4">int</span> controlState<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> m_tires.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> i<span class="sy2">++</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m_tires<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy2">-</span><span class="sy1">&gt;</span>updateFriction<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> m_tires.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> i<span class="sy2">++</span><span class="br0">&#41;</span> 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m_tires<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy2">-</span><span class="sy1">&gt;</span>updateDrive<span class="br0">&#40;</span>controlState<span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="br0">&#125;</span></pre></td></tr></tbody></table>
Oh dear. I just wasted ten minutes playing with that, and I can't even steer yet...
I suppose that's a good sign :) To get a nicer acceleration and top speed with this
heavier body, I changed the characteristics of the tires to:
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="kw4">float</span> maxForwardSpeed <span class="sy1">=</span> <span class="nu0">250</span><span class="sy4">;</span>
&nbsp; <span class="kw4">float</span> maxBackwardSpeed <span class="sy1">=</span> <span class="sy2">-</span><span class="nu0">40</span><span class="sy4">;</span>
&nbsp; <span class="kw4">float</span> maxDriveForce <span class="sy1">=</span> <span class="nu0">300</span><span class="sy4">;</span></pre></td></tr></tbody></table>To turn the front wheels we could use a joint motor, but without any other linkage
between them they could become out of sync with each other, especially with the rough
treatment we are about to give them. For this example I decided to control the
steering by setting the joint limits, which forces the tires into a specific angle.
It's a little unorthodox but works fine and lets us directly control the rate of turn
independently from anything else happening to the tire (remember how we killed the
angular velocity of the tires?), instead of setting motor speed and torque and hoping
for the best.
<table class="box2d"><tbody><tr class="li1"><td class="ln"><pre class="de1">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="de1"><pre class="de1">&nbsp; <span class="co1">//car class function</span>
&nbsp; <span class="kw4">float</span> lockAngle <span class="sy1">=</span> <span class="nu0">40</span> <span class="sy2">*</span> DEGTORAD<span class="sy4">;</span>
&nbsp; <span class="kw4">float</span> turnSpeedPerSec <span class="sy1">=</span> <span class="nu0">320</span> <span class="sy2">*</span> DEGTORAD<span class="sy4">;</span><span class="co1">//from lock to lock in 0.25 sec</span>
&nbsp; <span class="kw4">float</span> turnPerTimeStep <span class="sy1">=</span> turnSpeedPerSec <span class="sy2">/</span> <span class="nu17">60.0f</span><span class="sy4">;</span>
&nbsp; <span class="kw4">float</span> desiredAngle <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
&nbsp; <span class="kw1">switch</span> <span class="br0">&#40;</span> controlState <span class="sy3">&amp;</span> <span class="br0">&#40;</span>TDC_LEFT<span class="sy3">|</span>TDC_RIGHT<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">case</span> TDC_LEFT<span class="sy4">:</span> &nbsp;desiredAngle <span class="sy1">=</span> lockAngle<span class="sy4">;</span> &nbsp;<span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">case</span> TDC_RIGHT<span class="sy4">:</span> desiredAngle <span class="sy1">=</span> <span class="sy2">-</span>lockAngle<span class="sy4">;</span> <span class="kw1">break</span><span class="sy4">;</span>
&nbsp; &nbsp; &nbsp; <span class="kw1">default</span><span class="sy4">:</span> <span class="sy4">;</span><span class="co1">//nothing</span>
&nbsp; <span class="br0">&#125;</span>
&nbsp; <span class="kw4">float</span> angleNow <span class="sy1">=</span> flJoint<span class="sy2">-</span><span class="sy1">&gt;</span>GetJointAngle<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="kw4">float</span> angleToTurn <span class="sy1">=</span> desiredAngle <span class="sy2">-</span> angleNow<span class="sy4">;</span>
&nbsp; angleToTurn <span class="sy1">=</span> b2Clamp<span class="br0">&#40;</span> angleToTurn, <span class="sy2">-</span>turnPerTimeStep, turnPerTimeStep <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; <span class="kw4">float</span> newAngle <span class="sy1">=</span> angleNow <span class="sy2">+</span> angleToTurn<span class="sy4">;</span>
&nbsp; flJoint<span class="sy2">-</span><span class="sy1">&gt;</span>SetLimits<span class="br0">&#40;</span> newAngle, newAngle <span class="br0">&#41;</span><span class="sy4">;</span>
&nbsp; frJoint<span class="sy2">-</span><span class="sy1">&gt;</span>SetLimits<span class="br0">&#40;</span> newAngle, newAngle <span class="br0">&#41;</span><span class="sy4">;</span></pre></td></tr></tbody></table>40 degrees may be a little too much... we'll see.

<img class="ss" alt="Box2D Top-down car physics" src="/image/topdown-steeringlock.png" />

Playing with this you'll find that it's great for doing huge 'drift' powerslides,
something you might like every now and then, but it's too drifty to feel like it's
on a tarmac road. I think this is due to the extra mass of the car body we added.
I found that to get something I was satisfied with I needed to give the front and
back wheels different characteristics, and even then it was not quite as much fun
as I had hoped. To do this properly would take quite a bit of tweaking and tuning,
probably involving different friction and power settings at different speeds,
but I'll leave that to you :)<br />
<br />
<br />

<h3>Conclusion</h3>
<br />
... are you still here? This topic ended up being much longer than I thought, and
covered quite a few more things than just the 'killing' of lateral velocity on a
body. To make this into an enjoyable foundation for a game would still require
more work, but hopefully this is a good start. Check out the source code below to
compile and edit this yourself, or just download a binary and play around with it :) <br />
<br />
<br />

<a name="sourcecode"></a>
<h3>Source code</h3>
<br />
Here is the source code for those who would like to try it out for themselves.
This is a 'test' for the testbed, based on Box2D v2.3.0.<br />



<br />
<a name="binary"></a>
Testbed test: <a href="/src/iforce2d_TopdownCar.h">iforce2d_TopdownCar.h</a><br />
<br />
<a href="/Testbed_iforce2dTopdownCar-linux.zip">Linux binary</a><br />
<a href="/Testbed_iforce2dTopdownCar-win32.zip">Windows binary</a><br />
<br />
<a href="http://www.youtube.com/watch?v=PFKw1Ks3MfY">YouTube video</a><br />
<br />
<hr />
<br />
Here is the source code and json for the scene in the video:<br />
<a href="/src/iforce2d_TopdownCarRaceTrack.h">iforce2d_TopdownCarRaceTrack.h</a><br />
<a href="/src/racetrack.json">racetrack.json</a><br />
<br />
<a href="/Testbed_iforce2dTopdownCarRaceTrack-linux.zip">Linux binary</a><br />
<br />
<img class="ss" alt="Box2D Top-down car physics" src="/image/topdown-track.png" />

<br />


<br />
<a name="binary"></a>
Florian Knoll has made an implementation for libGDX: <a href="http://www.andengine.org/forums/tutorials/box2d-physic-racer-t16090.html">forum post</a><br />
<br />

<br />


<!--<div style="text-align:center;color:#f00;font-size:0.9em">(this topic is currently under construction)</div>-->


<br /><hr />
 <div class="next-tut"></div>
	</div>
	
		
	<a name="commentTop"></a>
		
	<div id="disqus">
	  
	  <div id="disqus_thread"></div>
	  <script type="text/javascript">
/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = 'iforce2d'; // required: replace example with your forum shortname

// The following are highly recommended additional parameters. Remove the slashes in front to use.
var disqus_identifier = 'top-down-car';
// var disqus_url = 'http://example.com/permalink-to-page.html';

/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
	  </script>

	</div><!--disqus-->

	<div class="smallspacer">
	</div>
	
      </div><!--content-->
      
    </td>
      <td>
              </td>
      </tr>
    </table>
    
  </div><!--limitwidth-colored-->

  <div class="smallspacer">
  </div>

</div><!--main-->
</div><!--wrap-->

<div id="footer">
  <div class="limitwidth-colored">
  <div id="footer-content">
    <div class="center">
      
      <br />
      <span style="font-size:10px">Want to promote your Box2D game here for free?<br />
      Contact gmail 'iforce2d'<br />
      If you find this site useful please consider <a href="/support">supporting it</a> :) 
      </span>
      <br />
      <br />
      
    </div>
  </div>
</div>

</div>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-23374246-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</body>
</html>

